{"version":3,"sources":["logo.svg","components/colorpickers.js","components/header.js","components/combinedcolors.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ColorPickers","props","content","name","map","getFruit","find","color","key","temp","tempcolor","hex","console","log","className","style","backgroundColor","marginTop","disableAlpha","data-tag","onChange","onChangeComplete","Header","CombinedColors","useState","colors","length","val","a","b","c","i","parseInt","slice","hexa","toString","toUpperCase","hexb","hexc","newstring","onCopy","alert","text","App","setColors","keyval","setKeyVal","picker","setPickers","Container","Row","Col","md","sm","item","Fab","aria-label","onClick","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4340096d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React,{ useState } from \"react\";\r\n\r\nimport { SketchPicker } from 'react-color';\r\nimport './colorpickers.css'\r\n\r\nfunction ColorPickers(props) {\r\n  // const [color,setColor]=useState({colors:[]})\r\n//   console.log(\"props are \"+props.colors)\r\n//   console.log(props.colors);\r\n  const content = props.name.map((name) =>{\r\n     const getFruit = props.name.find(color => color.key === name.key);\r\n     const temp=getFruit.tempcolor.hex\r\n      console.log(\"key is \"+name.key,getFruit.tempcolor,temp)\r\n     return <div className=\"color-picker-class\" key={name.key} style={{backgroundColor:temp,marginTop:\"1rem\"}}><SketchPicker  disableAlpha={true} className=\"sketch\" color={getFruit.tempcolor.hex} key={name.key} data-tag={name.key} onChange={(color)=>{\r\n        //  console.log(color)\r\n        //  console.log(getFruit+\"fruit\")\r\n        props.onChangeComplete(color,name.key)}}></SketchPicker></div>\r\n \r\n   }\r\n \r\n );     \r\n\r\n return <div>{content}</div>\r\n\r\n\r\n}\r\n\r\nexport default ColorPickers;\r\n","import React,{ useState } from \"react\";\r\n\r\nimport './header.css'\r\n\r\nfunction Header(props) {\r\n\r\n\r\n\r\n return <div className=\"header-class\">\r\n          <h1>Simple Color Blender</h1>\r\n        </div>\r\n\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React,{ useState } from \"react\";\r\nimport './combinedcolors.css'\r\n// import { SketchPicker } from 'react-color';\r\n// import './colorpickers.css'\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\n\r\nfunction CombinedColors(props) {\r\n    const [colorvalue,setColorValue]=useState(0);\r\n    const onClick = () => {\r\n        alert(\"copied!\")\r\n    }\r\n  // const [color,setColor]=useState({colors:[]})\r\n//   console.log(\"props are \"+props.colors)\r\n//   console.log(props.colors);\r\n    if(props.colors.length===0)\r\n    {\r\n        console.log(\"EMPTY\")\r\n\r\n        return <div>\r\n        <p className=\"color-result-class\">color</p>\r\n        <p>test</p>\r\n        </div>\r\n    }\r\n\r\n    else{\r\n        console.log(\"HAS VALUE\")\r\n        let val=0;\r\n        let a=0\r\n        let b=0\r\n        let c=0\r\n        for(let i=0;i<props.colors.length;i++){\r\n            // console.log(props.colors[i].tempcolor.hex)\r\n            val+=parseInt(\"0x\"+props.colors[i].tempcolor.hex.slice(1,props.colors[i].tempcolor.hex.length))\r\n            a+=parseInt(\"0x\"+props.colors[i].tempcolor.hex.slice(1,3))\r\n            b+=parseInt(\"0x\"+props.colors[i].tempcolor.hex.slice(3,5))\r\n            c+=parseInt(\"0x\"+props.colors[i].tempcolor.hex.slice(5,7))\r\n        }\r\n        val=parseInt(val/props.colors.length)\r\n        a=parseInt(a/props.colors.length)\r\n        b=parseInt(b/props.colors.length)\r\n        c=parseInt(c/props.colors.length)\r\n        let hexa=('00' + a.toString(16).toUpperCase()).slice(-2);\r\n        let hexb=('00' + b.toString(16).toUpperCase()).slice(-2);\r\n        let hexc=('00' + c.toString(16).toUpperCase()).slice(-2);\r\n        console.log(\"hexa b c:\",hexa,hexb,hexc)\r\n        console.log(\"#\"+val.toString(16),\"value is\",val)\r\n        console.log(props.colors.length,\"aisojdoasjd\")\r\n        let str=\"#\"+val.toString(16)\r\n        let newstring=\"#\"+hexa+hexb+hexc\r\n        console.log(newstring)\r\n        return <div>\r\n            <p className=\"color-result-class\" style={{backgroundColor:newstring}}>{newstring}</p>\r\n            <CopyToClipboard onCopy={onClick} text={newstring}>\r\n            <button>Copy to clipboard</button>\r\n           </CopyToClipboard>\r\n            </div>\r\n        \r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default CombinedColors;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { SketchPicker } from \"react-color\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Container from \"react-bootstrap/Container\";\nimport ColorPickers from \"./components/colorpickers\";\nimport Header from \"./components/header\";\nimport CombinedColors from \"./components/combinedcolors\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nfunction App() {\n  let key = 0;\n  // const [color,setColor]=useState({colors:[]})\n  const [colors, setColors] = useState([]);\n  const [keyval, setKeyVal] = useState(0);\n  const [picker, setPickers] = useState([]);\n\n  const handleChangeComplete = (color, key) => {\n    // setColors([...colors, {color,key:keyval}]);\n    console.log(color);\n    console.log(key);\n    let a = colors.map(function(item) {\n      return item.key == key ? { tempcolor: color, key: key } : item;\n    });\n    // console.log(\"getfruit is \",a)\n    setColors(a);\n    console.log(\"colors are \", colors);\n  };\n\n  const handleAddPickers = () => {\n    setPickers([...picker, { key: keyval }]);\n    setColors([...colors, { tempcolor: { hex: \"#FFFFFF\" }, key: keyval }]);\n    setKeyVal(keyval + 1);\n    console.log(colors);\n  };\n  return (\n    <div className=\"App\">\n      <Container className=\"justify-content-md-center\">\n        <Header></Header>\n        <Row>\n          <Col md={6} sm={12}>\n            {/* <SketchPicker onChangeComplete={handleChangeComplete}></SketchPicker> */}\n            <ColorPickers\n              name={colors}\n              colors={colors}\n              onChangeComplete={handleChangeComplete}\n            ></ColorPickers>\n            {/* <button onClick={handleAddPickers} style={{fontSize:\"5rem\"}}>+</button> */}\n            <Fab color=\"primary\" aria-label=\"add\" onClick={handleAddPickers}>\n              <AddIcon />\n            </Fab>\n          </Col>\n          <Col md={6} sm={12}>\n            <CombinedColors colors={colors}></CombinedColors>\n          </Col>\n        </Row>\n        <hr className=\"hr-class\"></hr>\n        <p style={{color:\"white\"}}>Created by Alex Dushevski @tehheavy <a href=\"https://github.com/Tehheavy\">https://github.com/Tehheavy</a></p>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}